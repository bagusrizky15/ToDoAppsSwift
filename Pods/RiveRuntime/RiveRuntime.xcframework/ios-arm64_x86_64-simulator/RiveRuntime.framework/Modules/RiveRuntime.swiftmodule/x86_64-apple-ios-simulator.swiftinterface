// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RiveRuntime
import Foundation
@_exported import RiveRuntime
import Swift
import SwiftUI
import _Concurrency
extension RiveRuntime.RiveFile {
  convenience public init(name fileName: Swift.String, extension ext: Swift.String = ".riv") throws
  public static func getBytes(fileName: Swift.String, extension ext: Swift.String = ".riv") -> [Swift.UInt8]
}
public protocol RivePlayerDelegate : AnyObject {
  func loop(animation animationName: Swift.String, type: Swift.Int)
  func play(animation animationName: Swift.String, isStateMachine: Swift.Bool)
  func pause(animation animationName: Swift.String, isStateMachine: Swift.Bool)
  func stop(animation animationName: Swift.String, isStateMachine: Swift.Bool)
}
@objc public protocol RiveTouchDelegate {
  @objc optional func touchBegan(onArtboard artboard: RiveRuntime.RiveArtboard?, atLocation location: CoreGraphics.CGPoint)
  @objc optional func touchMoved(onArtboard artboard: RiveRuntime.RiveArtboard?, atLocation location: CoreGraphics.CGPoint)
  @objc optional func touchEnded(onArtboard artboard: RiveRuntime.RiveArtboard?, atLocation location: CoreGraphics.CGPoint)
  @objc optional func touchCancelled(onArtboard artboard: RiveRuntime.RiveArtboard?, atLocation location: CoreGraphics.CGPoint)
}
public enum StateMachineInputType {
  case trigger
  case number
  case boolean
  public static func == (a: RiveRuntime.StateMachineInputType, b: RiveRuntime.StateMachineInputType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct StateMachineInput : Swift.Hashable {
  public let name: Swift.String
  public let type: RiveRuntime.StateMachineInputType
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: RiveRuntime.StateMachineInput, b: RiveRuntime.StateMachineInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RInputDelegate : AnyObject {
  func inputs(_ inputs: [RiveRuntime.StateMachineInput])
}
public typealias InputsAction = (([RiveRuntime.StateMachineInput]) -> Swift.Void)?
public protocol RStateDelegate : AnyObject {
  func stateChange(_ stateMachineName: Swift.String, _ stateName: Swift.String)
}
public typealias StateChangeAction = ((Swift.String, Swift.String) -> Swift.Void)?
@objc @_Concurrency.MainActor(unsafe) open class RiveView : RiveRuntime.RiveRendererView {
  @_Concurrency.MainActor(unsafe) open var artboard: RiveRuntime.RiveArtboard?
  @_Concurrency.MainActor(unsafe) open var fit: RiveRuntime.Fit {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var alignment: RiveRuntime.Alignment {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var animations: [RiveRuntime.RiveLinearAnimationInstance]
  @_Concurrency.MainActor(unsafe) public var playingAnimations: Swift.Set<RiveRuntime.RiveLinearAnimationInstance>
  @_Concurrency.MainActor(unsafe) public var stateMachines: [RiveRuntime.RiveStateMachineInstance]
  @_Concurrency.MainActor(unsafe) public var playingStateMachines: Swift.Set<RiveRuntime.RiveStateMachineInstance>
  @_Concurrency.MainActor(unsafe) weak public var playerDelegate: RiveRuntime.RivePlayerDelegate?
  @_Concurrency.MainActor(unsafe) weak public var touchDelegate: RiveRuntime.RiveTouchDelegate?
  @_Concurrency.MainActor(unsafe) weak public var inputsDelegate: RiveRuntime.RInputDelegate?
  @_Concurrency.MainActor(unsafe) weak public var stateChangeDelegate: RiveRuntime.RStateDelegate?
  @_Concurrency.MainActor(unsafe) public init(riveFile: RiveRuntime.RiveFile, fit: RiveRuntime.Fit = .fitContain, alignment: RiveRuntime.Alignment = .alignmentCenter, autoplay: Swift.Bool = true, artboardName: Swift.String? = nil, animationName: Swift.String? = nil, stateMachineName: Swift.String? = nil, playerDelegate: RiveRuntime.RivePlayerDelegate? = nil, inputsDelegate: RiveRuntime.RInputDelegate? = nil, stateChangeDelegate: RiveRuntime.RStateDelegate? = nil) throws
  @_Concurrency.MainActor(unsafe) public init(fileName: Swift.String, fit: RiveRuntime.Fit = .fitContain, alignment: RiveRuntime.Alignment = .alignmentCenter, autoplay: Swift.Bool = true, artboardName: Swift.String? = nil, animationName: Swift.String? = nil, stateMachineName: Swift.String? = nil, playerDelegate: RiveRuntime.RivePlayerDelegate? = nil, inputsDelegate: RiveRuntime.RInputDelegate? = nil, stateChangeDelegate: RiveRuntime.RStateDelegate? = nil) throws
  @_Concurrency.MainActor(unsafe) public init(webURL: Swift.String, fit: RiveRuntime.Fit = .fitContain, alignment: RiveRuntime.Alignment = .alignmentCenter, autoplay: Swift.Bool = true, artboardName: Swift.String? = nil, animationName: Swift.String? = nil, stateMachineName: Swift.String? = nil, playerDelegate: RiveRuntime.RivePlayerDelegate? = nil, inputsDelegate: RiveRuntime.RInputDelegate? = nil, stateChangeDelegate: RiveRuntime.RStateDelegate? = nil) throws
  @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension RiveRuntime.RiveView : RiveRuntime.RiveFileDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func riveFileDidLoad(_ riveFile: RiveRuntime.RiveFile) throws
}
extension RiveRuntime.RiveView {
  @_Concurrency.MainActor(unsafe) open func configure(_ riveFile: RiveRuntime.RiveFile, artboardName: Swift.String? = nil, animationName: Swift.String? = nil, stateMachineName: Swift.String? = nil, autoPlay: Swift.Bool = true) throws
  @_Concurrency.MainActor(unsafe) open func artboardNames() -> [Swift.String]
  @_Concurrency.MainActor(unsafe) open func animationNames() -> [Swift.String]
  @_Concurrency.MainActor(unsafe) open func stateMachineNames() -> [Swift.String]
  @_Concurrency.MainActor(unsafe) open func isActive(artboard: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func stateMachineInputs() throws -> [RiveRuntime.StateMachineInput]
}
extension RiveRuntime.RiveView {
  @_Concurrency.MainActor(unsafe) open var isPlaying: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func isPaused() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func drawRive(_ rect: CoreGraphics.CGRect, size: CoreGraphics.CGSize)
  @_Concurrency.MainActor(unsafe) open func advance(delta: Swift.Double)
}
extension RiveRuntime.RiveView {
  @_Concurrency.MainActor(unsafe) public func reset(artboard: Swift.String? = nil, animation: Swift.String? = nil, stateMachine: Swift.String? = nil) throws
  @_Concurrency.MainActor(unsafe) public func play(loop: RiveRuntime.Loop = .loopAuto, direction: RiveRuntime.Direction = .directionAuto) throws
  @_Concurrency.MainActor(unsafe) public func play(animationName: Swift.String, loop: RiveRuntime.Loop = .loopAuto, direction: RiveRuntime.Direction = .directionAuto, isStateMachine: Swift.Bool = false) throws
  @_Concurrency.MainActor(unsafe) public func play(animationNames: [Swift.String], loop: RiveRuntime.Loop = .loopAuto, direction: RiveRuntime.Direction = .directionAuto, isStateMachine: Swift.Bool = false) throws
  @_Concurrency.MainActor(unsafe) public func pause()
  @_Concurrency.MainActor(unsafe) public func pause(animationName: Swift.String, isStateMachine: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func pause(animationNames: [Swift.String], isStateMachine: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func stop()
  @_Concurrency.MainActor(unsafe) public func stop(animationName: Swift.String, isStateMachine: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func stop(animationNames: [Swift.String], isStateMachine: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func fireState(_ stateMachineName: Swift.String, inputName: Swift.String) throws
  @_Concurrency.MainActor(unsafe) open func setBooleanState(_ stateMachineName: Swift.String, inputName: Swift.String, value: Swift.Bool) throws
  @_Concurrency.MainActor(unsafe) open func setNumberState(_ stateMachineName: Swift.String, inputName: Swift.String, value: Swift.Float) throws
}
extension RiveRuntime.RiveView : RiveRuntime.RArtboardDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func artboard(_ artboard: RiveRuntime.RiveArtboard, didTriggerEvent event: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
}
open class RiveViewModel : Foundation.ObservableObject, RiveRuntime.RiveTouchDelegate {
  public var rview: RiveRuntime.RiveView? {
    get
  }
  public var inputsAction: RiveRuntime.InputsAction
  public var stateChangeAction: RiveRuntime.StateChangeAction
  public init(_ model: RiveRuntime.RiveModel)
  convenience public init(fileName: Swift.String, stateMachineName: Swift.String? = nil, fit: RiveRuntime.Fit = .fitContain, alignment: RiveRuntime.Alignment = .alignmentCenter, autoplay: Swift.Bool = true, artboardName: Swift.String? = nil, animationName: Swift.String? = nil)
  convenience public init(webURL: Swift.String, stateMachineName: Swift.String? = nil, fit: RiveRuntime.Fit = .fitContain, alignment: RiveRuntime.Alignment = .alignmentCenter, autoplay: Swift.Bool = true, artboardName: Swift.String? = nil, animationName: Swift.String? = nil)
  open func view() -> some SwiftUI.View
  
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension RiveRuntime.RiveViewModel {
  public func createRView() -> RiveRuntime.RiveView
  @objc dynamic open func update(rview: RiveRuntime.RiveView)
  @objc dynamic open func setView(_ rview: RiveRuntime.RiveView)
  public func reset() throws
  public func play(_ loop: RiveRuntime.Loop = .loopAuto, _ direction: RiveRuntime.Direction = .directionAuto) throws
  public func play(animationName: Swift.String, loop: RiveRuntime.Loop = .loopAuto, direction: RiveRuntime.Direction = .directionAuto, isStateMachine: Swift.Bool = false) throws
  public func play(animationNames: [Swift.String], loop: RiveRuntime.Loop = .loopAuto, direction: RiveRuntime.Direction = .directionAuto, isStateMachine: Swift.Bool = false) throws
  public func pause()
  public func pause(_ animationName: Swift.String, _ isStateMachine: Swift.Bool = false)
  public func pause(_ animationNames: [Swift.String], _ isStateMachine: Swift.Bool = false)
  public func stop()
  public func stop(_ animationNames: [Swift.String], _ isStateMachine: Swift.Bool = false)
  public func stop(_ animationName: Swift.String, _ isStateMachine: Swift.Bool = false)
  public func triggerInput(_ inputName: Swift.String, stateMachineName: Swift.String) throws
  open func setInput(_ inputName: Swift.String, value: Swift.Bool, stateMachineName: Swift.String? = nil) throws
  open func setInput(_ inputName: Swift.String, value: Swift.Float, stateMachineName: Swift.String? = nil) throws
  open func setInput(_ inputName: Swift.String, value: Swift.Double, stateMachineName: Swift.String? = nil) throws
}
extension RiveRuntime.RiveViewModel {
  public var webURL: Swift.String? {
    get
  }
  public var fileName: Swift.String? {
    get
  }
  public var fit: RiveRuntime.Fit {
    get
    set
  }
  public var alignment: RiveRuntime.Alignment {
    get
    set
  }
  public var autoplay: Swift.Bool {
    get
    set
  }
  public var artboardName: Swift.String? {
    get
    set
  }
  public var animationName: Swift.String? {
    get
    set
  }
  public var stateMachineName: Swift.String? {
    get
    set
  }
}
extension RiveRuntime.RiveViewModel {
  public struct StandardView : SwiftUI.View {
    public var dismiss: () -> Swift.Void
    @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
      get
    }
    public typealias Body = @_opaqueReturnTypeOf("$s11RiveRuntime0A9ViewModelC08StandardC0V4bodyQrvp", 0) __
  }
}
extension RiveRuntime.RiveViewModel : RiveRuntime.RivePlayerDelegate {
  public func loop(animation animationName: Swift.String, type: Swift.Int)
  public func play(animation animationName: Swift.String, isStateMachine: Swift.Bool)
  public func pause(animation animationName: Swift.String, isStateMachine: Swift.Bool)
  public func stop(animation animationName: Swift.String, isStateMachine: Swift.Bool)
}
extension RiveRuntime.RiveViewModel : RiveRuntime.RInputDelegate, RiveRuntime.RStateDelegate {
  public func inputs(_ inputs: [RiveRuntime.StateMachineInput])
  public func stateChange(_ stateMachineName: Swift.String, _ stateName: Swift.String)
}
public struct RViewRepresentable : SwiftUI.UIViewRepresentable {
  public init(viewModel: RiveRuntime.RiveViewModel)
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: RiveRuntime.RViewRepresentable.Context) -> RiveRuntime.RiveView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ view: RiveRuntime.RiveView, context: SwiftUI.UIViewRepresentableContext<RiveRuntime.RViewRepresentable>)
  @_Concurrency.MainActor(unsafe) public static func dismantleUIView(_ view: RiveRuntime.RiveView, coordinator: RiveRuntime.RViewRepresentable.Coordinator)
  @_Concurrency.MainActor(unsafe) public func makeCoordinator() -> RiveRuntime.RViewRepresentable.Coordinator
  @objc @_hasMissingDesignatedInitializers public class Coordinator : ObjectiveC.NSObject {
    public var viewModel: RiveRuntime.RiveViewModel
    @objc deinit
  }
  public typealias Body = Swift.Never
  public typealias UIViewType = RiveRuntime.RiveView
}
public struct RiveModel {
  public var webURL: Swift.String?
  public var fileName: Swift.String?
  public var fit: RiveRuntime.Fit
  public var alignment: RiveRuntime.Alignment
  public var autoplay: Swift.Bool
  public var artboardName: Swift.String?
  public var animationName: Swift.String?
  public var stateMachineName: Swift.String?
  public var description: Swift.String {
    get
  }
  public init(fileName: Swift.String, stateMachineName: Swift.String? = nil, fit: RiveRuntime.Fit = .fitContain, alignment: RiveRuntime.Alignment = .alignmentCenter, autoplay: Swift.Bool = true, artboardName: Swift.String? = nil, animationName: Swift.String? = nil)
  public init(webURL: Swift.String, stateMachineName: Swift.String? = nil, fit: RiveRuntime.Fit = .fitContain, alignment: RiveRuntime.Alignment = .alignmentCenter, autoplay: Swift.Bool = true, artboardName: Swift.String? = nil, animationName: Swift.String? = nil)
}
extension RiveRuntime.Fit {
  public var description: Swift.String {
    get
  }
}
extension RiveRuntime.Alignment {
  public var description: Swift.String {
    get
  }
}
extension RiveRuntime.StateMachineInputType : Swift.Equatable {}
extension RiveRuntime.StateMachineInputType : Swift.Hashable {}
